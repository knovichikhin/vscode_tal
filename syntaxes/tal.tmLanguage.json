{
  "name": "TAL",
  "patterns": [
    { "include": "#comments" },
    { "include": "#compiler_directive" },
    { "include": "#keywords" },
    { "include": "#structure_declaration" },
    { "include": "#storage_types" },
    { "include": "#operators" },
    { "include": "#numbers" },
    { "include": "#strings" },
    { "include": "#illegal_tal" },
    { "include": "#function_declaration" },
    { "include": "#function_call" },
    { "include": "#lib_tal" },
    { "include": "#punctuation_accessor" },
    { "include": "#punctuation_comma" },
    { "include": "#punctuation_semicolon" },
    { "include": "#punctuation_colon" },
    { "include": "#punctuation_pound" },
    { "include": "#punctuation_paren_begin" },
    { "include": "#punctuation_paren_end" },
    { "include": "#punctuation_bracket_begin" },
    { "include": "#punctuation_bracket_end" },
    { "include": "#variable" }
  ],
  "repository": {
    "punctuation_paren_begin": {
      "name": "punctuation.parenthesis.begin.tal",
      "match": "\\("
    },
    "punctuation_paren_end": {
      "name": "punctuation.parenthesis.end.tal",
      "match": "\\)"
    },
    "punctuation_bracket_begin": {
      "name": "punctuation.bracket.begin.tal",
      "match": "\\["
    },
    "punctuation_bracket_end": {
      "name": "punctuation.bracket.end.tal",
      "match": "\\]"
    },
    "punctuation_comma": {
      "name": "punctuation.separator.comma.tal",
      "match": ","
    },
    "punctuation_semicolon": {
      "name": "punctuation.terminator.statement.tal",
      "match": ";"
    },
    "punctuation_colon": {
      "name": "punctuation.separator.tal",
      "match": ":"
    },
    "punctuation_pound": {
      "name": "punctuation.terminator.define.tal",
      "match": "#"
    },
    "punctuation_accessor": {
      "name": "meta.punctuation.accessor.tal",
      "match": "(?<=[a-zA-Z0-9\\^_])(\\.)(?=[a-zA-Z\\^_<])",
      "captures": {
        "1": { "name": "punctuation.accessor.tal" }
      }
    },
    "compiler_directive": {
      "patterns": [
        {
          "comment": "name/block directive that is followed by an ID",
          "match": "(?i)^\\s*(name|block)(?!\\^)\\b\\s+([a-zA-Z^_][a-zA-Z0-9^_]*)",
          "captures": {
            "1": { "name": "keyword.tal" },
            "2": { "name": "entity.name.tag.tal" }
          }
        },
        {
          "comment": "?section directive that is followed by an ID",
          "match": "(?i)^(\\?)\\s*(section)(?!\\^)\\b\\s+([a-zA-Z^_][a-zA-Z0-9^_]*)",
          "name": "meta.preprocessor.tal",
          "captures": {
            "1": { "name": "punctuation.definition.directive.tal" },
            "2": { "name": "keyword.preprocessor.tal" },
            "3": {
              "name": "entity.name.function.tal entity.name.namespace.tal entity.name.section.tal"
            }
          }
        },
        {
          "comment": "TAL directive",
          "name": "meta.preprocessor.tal",
          "begin": "^(\\?)",
          "beginCaptures": {
            "1": { "name": "punctuation.definition.directive.tal" }
          },
          "end": "$",
          "patterns": [
            { "include": "#punctuation_comma" },
            { "include": "#comments" },
            { "include": "#compiler_directive_keyword" }
          ]
        }
      ]
    },
    "compiler_directive_keyword": {
      "patterns": [
        {
          "comment": "Conditional directives that are followed by a series of IDs",
          "name": "meta.preprocessor.multiline-directive.tog.tal",
          "begin": "\\b(?<!\\^)(settog|resettog|definetog)(?!\\^)\\b\\s*(\\()",
          "beginCaptures": {
            "1": { "name": "keyword.preprocessor.tal" },
            "2": { "name": "punctuation.parenthesis.begin.tal" }
          },
          "end": "\\)",
          "endCaptures": {
            "0": { "name": "punctuation.parenthesis.end.tal" }
          },
          "patterns": [
            { "include": "#comments" },
            { "include": "#punctuation_comma" },
            {
              "match": "(?i)\\s*\\b([a-zA-Z\\^_][a-zA-Z0-9\\^_]*|[0-9]*)",
              "name": "entity.name.tag.tal"
            }
          ]
        },
        {
          "comment": "Conditional directives that are followed by an ID",
          "match": "(?i)\\b(?<!\\^)(if|ifnot|endif|settog|resettog|definetog)(?!\\^)\\b\\s+([a-zA-Z^_][a-zA-Z0-9^_]*|[0-9]*)",
          "captures": {
            "1": { "name": "keyword.preprocessor.tal" },
            "2": { "name": "entity.name.tag.tal" }
          }
        },
        {
          "comment": "?page directive that is followed by a string",
          "match": "(?i)\\b(?<!\\^)(page)(?!\\^)\\b\\s+(\"[^\"]*\")",
          "captures": {
            "1": { "name": "keyword.preprocessor.tal" },
            "2": { "name": "string.quoted.double.tal" }
          }
        },
        {
          "comment": "Multiline TAL source directive. Highlight sections inside.",
          "name": "meta.preprocessor.multiline-directive.source.tal",
          "begin": "\\b(?<!\\^)(source)(?!\\^)\\b\\s*([a-z0-9\\-\\_\\.\\^*?=$\\\\]+)\\s*(\\()",
          "beginCaptures": {
            "1": { "name": "keyword.preprocessor.tal" },
            "2": { "name": "string.quoted.double.tal" },
            "3": { "name": "punctuation.parenthesis.begin.tal" }
          },
          "end": "\\)",
          "endCaptures": {
            "0": { "name": "punctuation.parenthesis.end.tal" }
          },
          "patterns": [
            { "include": "#comments" },
            {
              "match": "(?i)^(\\?)\\s*\\b([a-zA-Z\\^_][a-zA-Z0-9\\^_]*)",
              "name": "meta.function-import.tal",
              "captures": {
                "1": { "name": "punctuation.definition.directive" },
                "2": {
                  "name": "entity.name.function.tal entity.name.namespace.tal entity.name.section.tal"
                }
              }
            },
            {
              "match": "(?i)^[^\\?]?\\s*\\b([a-zA-Z\\^_][a-zA-Z0-9\\^_]*)",
              "name": "invalid.illegal.tal"
            },
            {
              "match": "(?i)\\s*\\b([a-zA-Z\\^_][a-zA-Z0-9\\^_]*)",
              "name": "meta.function-import.tal",
              "captures": {
                "1": {
                  "name": "entity.name.function.tal entity.name.namespace.tal entity.name.section.tal"
                }
              }
            },
            {
              "match": "^(\\?)",
              "name": "punctuation.definition.directive.tal"
            },
            { "include": "#punctuation_comma" }
          ]
        },
        {
          "comment": "Multiline TAL source directive. Highlight sections inside.",
          "name": "meta.preprocessor.singleline-directive.source.tal",
          "match": "\\b(?<!\\^)(source)(?!\\^)\\b\\s*([a-z0-9\\-\\_\\.\\^*?=$\\\\]+)",
          "captures": {
            "1": { "name": "keyword.preprocessor.tal" },
            "2": { "name": "string.quoted.double.tal" }
          }
        },
        {
          "name": "keyword.preprocessor.tal",
          "match": "(?i)\\b(?<!\\^)(assertion|begincompilation|cpu|decs|datapages|(define|set|reset)tog|dumpcons|env|errors|errorfile|(no)?(fixup|saveabend|code|crossref|inhibitxx|warn|suppress|symbols|compact)|(end)?if|ifnot|(no|push|pop)?(check|list|int32index|innerlist|map)|extendstack|rp|section|source|inspect|syntax|(no)?(l|g|f)map|high(requesters|pin)|runnamed|search|page)(?!\\^)\\b",
          "comment": "Compiler directive keywords. Look behind to avoid matching ^keyword."
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "comment": "Match text between double dash and end of line",
          "name": "comment.line.tal",
          "match": "-{2}.*$"
        },
        {
          "comment": "Match text between explanation marks or explanation mark and end of line",
          "name": "comment.line.tal",
          "begin": "!",
          "end": "(!|$)"
        }
      ]
    },
    "structure_declaration": {
      "patterns": [
        {
          "comment": "This is a structure declaration that could be a template. Flag it here to avoid flagging it as a function",
          "match": "(?i)\\b(?<!\\^)(struct)(?!\\^)\\b\\s*([a-zA-Z\\^_][a-zA-Z0-9\\^_]*)\\s*(?:(\\()\\s*([a-zA-Z\\^_][a-zA-Z0-9\\^_]*)?\\s*(\\)))",
          "captures": {
            "1": { "name": "storage.type.tal" },
            "2": { "name": "variable.tal" },
            "3": { "name": "punctuation.parenthesis.begin.tal" },
            "4": { "name": "entity.name.type.tal" },
            "5": { "name": "punctuation.parenthesis.end.tal" }
          }
        },
        {
          "comment": "This is a structure declaration that could be a template. Flag it here to avoid flagging it as a function",
          "match": "(?i)\\b(?<!\\^)(struct)(?!\\^)\\b\\s*([a-zA-Z\\^_][a-zA-Z0-9\\^_]*)\\s*(\\(\\s*\\*\\s*\\))?",
          "captures": {
            "1": { "name": "storage.type.tal" },
            "2": { "name": "variable.tal" },
            "3": { "name": "storage.modifier.tal" }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "comment": "Not a language constant, but it's usually defined",
          "match": "(?i)\\b(?<!\\^)(true|false)(?!\\^)\\b",
          "name": "constant.language.tal"
        },
        {
          "name": "keyword.control.tal",
          "match": "(?i)\\b(?<!\\^)(case|do|else|for|goto|if|label|of|otherwise|return|then|until|while|to|downto|by)(?!\\^)\\b",
          "comment": "Control flow keywords. Look behind to avoid matching ^keyword."
        },
        {
          "name": "keyword.tal",
          "match": "(?i)\\b(?<!\\^)(code|drop|entry|external|forward|use|words|bytes|scan|rscan|store|stack|(end\\s+)?block|target)(?!\\^)\\b",
          "comment": "Language keywords. Look behind to avoid matching ^keyword."
        },
        {
          "name": "keyword.other.tal",
          "match": "(?i)\\b(?<!\\^)(begin|end)(?!\\^)\\b",
          "comment": "Look behind to avoid matching ^keyword."
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "match": "(?<!\\^)((%(h|H)[0-9a-fA-F]([0-9a-fA-F]*)?)|(%[0-7]([0-7]*)?)|(%(b|B)[01]([01]*)?)|(\\b([0-9]([0-9]*)?\\.?[0-9]*([0-9]*)?)|(\\.[0-9]([0-9]*)?))((e|E|l|L)(\\+|-)?[0-9]([0-9]*)?)?)(D|d|%D|%d|F|f|%F|%f)?\\b",
          "name": "constant.numeric.tal"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.tal",
      "begin": "\"",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.string.begin.tal" }
      },
      "end": "\"",
      "endCaptures": {
        "0": { "name": "punctuation.definition.string.end.tal" }
      }
    },
    "operators": {
      "patterns": [
        {
          "match": "-|\\'-\\'",
          "name": "keyword.operator.decrement.tal"
        },
        {
          "match": "\\+|\\'\\+\\'",
          "name": "keyword.operator.increment.tal"
        },
        {
          "match": "<<|\\'<<\\'|>>|\\'>>\\'",
          "name": "keyword.operator.bitwise.shift.tal"
        },
        {
          "match": "<>|\\'<>\\'|<=|\\'<=\\'|>=|\\'>=\\'|=|\\'=\\'|<|\\'<\\'|>|\\'>\\'",
          "name": "keyword.operator.comparison.tal"
        },
        {
          "match": "(?i)\\b(?<!\\^)(not|and|or|lor|land|xor)(?!\\^)\\b",
          "name": "keyword.operator.logical.tal"
        },
        {
          "match": "\\'\\\\'",
          "name": "keyword.operator.tal"
        },
        {
          "match": ":=|\\':=\\'|=:|\\'=:\\'",
          "name": "keyword.operator.assignment.tal"
        },
        {
          "match": "\\*|\\'\\*\\'|/|\\'/\\'|&|@|->",
          "name": "keyword.operator.tal"
        }
      ]
    },
    "storage_types": {
      "patterns": [
        {
          "comment": "Match standalone '.ext' and '.sg'. Match '.' that is followed by a word and preceded by whitespace. Match a variable. Then match referral struct template if present.",
          "match": "(?i)(?<=\\s|^)(\\.sg(?=\\s)|\\.ext(?=\\s)|\\.(?=[a-zA-Z\\^_]))\\s*([a-zA-Z\\^_][a-zA-Z0-9\\^_]*)\\s*(?:(\\()\\s*([a-zA-Z\\^_][a-zA-Z0-9\\^_]*)?\\s*(\\)))?",
          "name": "meta.storage.modifier.tal",
          "captures": {
            "1": { "name": "storage.modifier.tal" },
            "2": { "name": "variable.tal" },
            "3": { "name": "punctuation.parenthesis.begin.tal" },
            "4": { "name": "entity.name.type.tal" },
            "5": { "name": "punctuation.parenthesis.end.tal" }
          }
        },
        {
          "match": "(?i)\\'p\\'|\\'g\\'|\\'l\\'|\\'s\\'|\\'sg\\'",
          "name": "storage.modifier.tal"
        },
        {
          "match": "(?i)\\b(?<!\\^)(literal|define|string|struct)(?!\\^)\\b",
          "name": "storage.type.tal"
        },
        {
          "comment": "These storage types may include additional parameters. int can be int, int(16), int(32), int(64) or int(literal)",
          "match": "(?i)\\b(?<!\\^)int(?!\\^)((\\s*\\(\\s*(16|32|64|([a-zA-Z\\^_][a-zA-Z0-9\\^_]*))\\s*\\))|\\b)",
          "name": "storage.type.tal"
        },
        {
          "comment": "These storage types may include additional parameters. real can be real, real(32), real(64) or real(literal)",
          "match": "(?i)\\b(?<!\\^)real(?!\\^)((\\s*\\(\\s*(32|64|([a-zA-Z\\^_][a-zA-Z0-9\\^_]*))\\s*\\))|\\b)",
          "name": "storage.type.tal"
        },
        {
          "comment": "These storage types may include additional parameters. fixed can be fixed, fixed(*), fixed(-19) or fixed(19)",
          "match": "(?i)\\b(?<!\\^)fixed(?!\\^)((\\s*\\(\\s*(\\*|-?[0-9]{1,2})\\s*\\))|\\b)",
          "name": "storage.type.tal"
        },
        {
          "comment": "These storage types may include additional parameters, unsigned can be unsigned(1), unsigned(31) or unsigned(literal)",
          "match": "(?i)\\b(?<!\\^)unsigned(?!\\^)((\\s*\\(\\s*([0-9]{1,2}|([a-zA-Z\\^_][a-zA-Z0-9\\^_]*))\\s*\\))|\\b)",
          "name": "storage.type.tal"
        }
      ]
    },
    "illegal_tal": {
      "patterns": [
        {
          "comment": "TAL does not allow identifiers that begin with numbers",
          "match": "\\b(?<!\\^)(\\d[\\w\\^]+)\\b",
          "name": "invalid.illegal.tal"
        },
        {
          "comment": "Identifiers longer than 31 are not allowed",
          "match": "\\s*[\\w\\^]{32,}",
          "name": "invalid.illegal.tal"
        },
        {
          "comment": "% are not allowed in the middle of an identifier",
          "match": "\\s*[\\w\\^]+\\%[\\w\\^]+",
          "name": "invalid.illegal.tal"
        }
      ]
    },
    "function_declaration": {
      "patterns": [
        {
          "name": "meta.function.declaration.tal",
          "comment": "Match proc or subproc declaration",
          "begin": "(?i)\\b(?<!\\^)(subproc|proc)(?!\\^)\\b\\s*([a-zA-Z\\^_][a-zA-Z0-9\\^_]*)\\s*(=\\s*\"[^\"]*\")?",
          "beginCaptures": {
            "1": { "name": "keyword.control.tal" },
            "2": { "name": "entity.name.function.tal" },
            "3": { "name": "string.quoted.double.public-name-spec.tal" }
          },
          "end": ";",
          "endCaptures": {
            "0": { "name": "punctuation.terminator.statement.tal" }
          },
          "patterns": [
            { "include": "#comments" },
            { "include": "#compiler_directive" },
            { "include": "#punctuation_comma" },
            {
              "name": "meta.function.declaration.param-list.tal",
              "begin": "\\(",
              "beginCaptures": {
                "0": { "name": "punctuation.parenthesis.begin.tal" }
              },
              "end": "\\)",
              "endCaptures": {
                "0": { "name": "punctuation.parenthesis.end.tal" }
              },
              "patterns": [
                { "include": "#comments" },
                { "include": "#compiler_directive" },
                { "include": "#punctuation_comma" },
                { "include": "#punctuation_colon" },
                { "include": "#variable_parameter_id" }
              ]
            },
            {
              "comment": "Procedure attribute extensible could have a count",
              "name": "meta.function.declaration.extensible-attr.tal",
              "begin": "(?i)\\b(?<!\\^)(extensible)(?!\\^)\\b\\s*(\\()",
              "beginCaptures": {
                "1": { "name": "keyword.tal" },
                "2": { "name": "punctuation.parenthesis.begin.tal" }
              },
              "end": "\\)",
              "endCaptures": {
                "0": { "name": "punctuation.parenthesis.end.tal" }
              },
              "patterns": [{ "include": "#numbers" }]
            },
            {
              "comment": "Procedure attribute language",
              "match": "(?i)\\b(?<!\\^)(language)(?!\\^)\\b\\s*\\b(?<!\\^)(c|cobol|fortran|pascal|unspecified)(?!\\^)\\b",
              "captures": {
                "1": { "name": "keyword.tal" },
                "2": { "name": "keyword.tal" }
              }
            },
            {
              "comment": "Procedure attributes",
              "name": "keyword.tal",
              "match": "(?i)\\b(?<!\\^)(main|interrupt|resident|callable|priv|variable|extensible|language)(?!\\^)\\b"
            }
          ]
        },
        {
          "comment": "Match proc or subproc keyword. This is here, so that proc and subproc are flagged as keywords before function name is provided.",
          "match": "(?i)\\b(?<!\\^)(subproc|proc)(?!\\^)\\b",
          "name": "keyword.control.tal"
        }
      ]
    },
    "function_call": {
      "patterns": [
        {
          "name": "meta.function.call.lib-tal.tal",
          "comment": "Standard TAL functions start with a $. These functions require parameters.",
          "begin": "(?i)(?<![\\^_%$#])(\\$dbl|\\$dbll|\\$dblr|\\$dfix|\\$eflt|\\$efltr|\\$fix|\\$fixd|\\$fixi|\\$fixl|\\$fixr|\\$flt|\\$fltr|\\$high|\\$ifix|\\$int|\\$intr|\\$lfix|\\$udbl|\\$ladr|\\$xadr|\\$alpha|\\$numeric|\\$special|\\$lmax|\\$lmin|\\$max|\\$min|\\$point|\\$scale|\\$bitlength|\\$bitoffset|\\$len|\\$occurs|\\$offset|\\$type|\\$abs|\\$comp|\\$optional|\\$param|\\$usercode|\\$axadr|\\$bounds)(?!\\^)\\s*(\\()",
          "beginCaptures": {
            "1": { "name": "entity.name.function.tal" },
            "2": { "name": "punctuation.parenthesis.begin.tal" }
          },
          "end": "\\)",
          "endCaptures": {
            "0": { "name": "punctuation.parenthesis.end.tal" }
          },
          "patterns": [{ "include": "#function_call_inside" }]
        },
        {
          "name": "meta.function.call.maybe.tal",
          "comment": "Possible function call",
          "begin": "(?i)([a-zA-Z\\^_][a-zA-Z0-9\\^_]*)\\s*(\\()",
          "beginCaptures": {
            "1": { "name": "entity.name.function.tal" },
            "2": { "name": "punctuation.parenthesis.begin.tal" }
          },
          "end": "\\)",
          "endCaptures": {
            "0": { "name": "punctuation.parenthesis.end.tal" }
          },
          "patterns": [{ "include": "#function_call_inside" }]
        },
        {
          "name": "meta.function.call.tal",
          "comment": "Definite function call",
          "begin": "(?i)\\b(?<!\\^)(call)(?!\\^)\\b\\s*([a-zA-Z\\^_][a-zA-Z0-9\\^_]*)\\s*(\\()",
          "beginCaptures": {
            "1": { "name": "keyword.control.tal" },
            "2": { "name": "entity.name.function.tal" },
            "3": { "name": "punctuation.parenthesis.begin.tal" }
          },
          "end": "\\)",
          "endCaptures": {
            "0": { "name": "punctuation.parenthesis.end.tal" }
          },
          "patterns": [{ "include": "#function_call_inside" }]
        },
        {
          "comment": "Definite function call without parameters",
          "match": "(?i)\\b(?<!\\^)(call)(?!\\^)\\b\\s*([a-zA-Z\\^_][a-zA-Z0-9\\^_]*)?",
          "captures": {
            "1": { "name": "keyword.control.tal" },
            "2": { "name": "entity.name.function.tal" }
          }
        }
      ]
    },
    "function_call_inside": {
      "patterns": [
        { "include": "#function_call" },
        {
          "comment": "Handle parens without identifier, e.g. foo((x+1)*2)",
          "begin": "\\(",
          "beginCaptures": {
            "0": { "name": "punctuation.parenthesis.begin.tal" }
          },
          "end": "\\)",
          "endCaptures": {
            "0": { "name": "punctuation.parenthesis.end.tal" }
          },
          "patterns": [{ "include": "#function_call_inside" }]
        },
        { "include": "#comments" },
        { "include": "#compiler_directive" },
        { "include": "#lib_tal" },
        { "include": "#keywords" },
        { "include": "#variable_parameter_id" },
        { "include": "#punctuation_comma" },
        { "include": "#punctuation_accessor" },
        { "include": "#punctuation_bracket_begin" },
        { "include": "#punctuation_bracket_end" },
        { "include": "#punctuation_paren_begin" },
        { "include": "#punctuation_paren_end" },
        { "include": "#numbers" },
        { "include": "#strings" },
        { "include": "#operators" }
      ]
    },
    "lib_tal": {
      "comment": "Standard TAL functions start with a $",
      "name": "entity.name.function.tal",
      "match": "(?i)(?<![\\^_%$#])(\\$dbl|\\$dbll|\\$dblr|\\$dfix|\\$eflt|\\$efltr|\\$fix|\\$fixd|\\$fixi|\\$fixl|\\$fixr|\\$flt|\\$fltr|\\$high|\\$ifix|\\$int|\\$intr|\\$lfix|\\$udbl|\\$ladr|\\$xadr|\\$alpha|\\$numeric|\\$special|\\$lmax|\\$lmin|\\$max|\\$min|\\$point|\\$scale|\\$bitlength|\\$bitoffset|\\$len|\\$occurs|\\$offset|\\$type|\\$abs|\\$comp|\\$optional|\\$param|\\$usercode|\\$axadr|\\$bounds|\\$carry|\\$overflow|\\$readclock|\\$rp|\\$switches)(?!\\^)\\b"
    },
    "variable_parameter_id": {
      "match": "([a-zA-Z\\^_][a-zA-Z0-9\\^_]*)",
      "name": "variable.parameter.tal"
    },
    "variable": {
      "match": "([a-zA-Z\\^_][a-zA-Z0-9\\^_]*)",
      "name": "variable.tal"
    }
  },
  "scopeName": "source.tal"
}
